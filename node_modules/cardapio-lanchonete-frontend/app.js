// Dados do cardápio
const menuData = [
    {
        id: 1,
        name: "X-Burguer Clássico",
        description: "Hambúrguer artesanal 150g, queijo cheddar, alface crocante, tomate fresco, cebola roxa e molho especial da casa",
        price: 18.90,
        category: "lanches",
        rating: 4.8,
        prepTime: "15-20 min"
    },
    {
        id: 2,
        name: "X-Bacon Supreme",
        description: "Duplo hambúrguer 300g, bacon crocante, queijo cheddar duplo, cebola caramelizada e molho barbecue",
        price: 24.90,
        category: "lanches",
        rating: 4.9,
        prepTime: "20-25 min"
    },
    {
        id: 3,
        name: "X-Frango Especial",
        description: "Filé de frango grelhado temperado, queijo branco, alface, tomate, cebola e maionese temperada",
        price: 16.90,
        category: "lanches",
        rating: 4.7,
        prepTime: "15-20 min"
    },
    {
        id: 4,
        name: "X-Vegetariano",
        description: "Hambúrguer de quinoa e legumes, queijo branco, rúcula fresca, tomate seco, cebola roxa e molho pesto",
        price: 19.90,
        category: "lanches",
        rating: 4.6,
        prepTime: "18-22 min"
    },
    {
        id: 5,
        name: "X-Picanha",
        description: "Hambúrguer de picanha 180g, queijo provolone, rúcula, tomate, cebola caramelizada e molho chimichurri",
        price: 28.90,
        category: "lanches",
        rating: 4.9,
        prepTime: "22-25 min"
    },
    {
        id: 6,
        name: "X-Fish",
        description: "Filé de peixe empanado, queijo cheddar, alface, tomate, cebola e molho tártaro caseiro",
        price: 21.90,
        category: "lanches",
        rating: 4.5,
        prepTime: "18-20 min"
    },
    {
        id: 7,
        name: "Coca-Cola 350ml",
        description: "Refrigerante gelado original",
        price: 5.50,
        category: "bebidas",
        rating: 4.5,
        prepTime: "Imediato"
    },
    {
        id: 8,
        name: "Suco Natural de Laranja",
        description: "Suco natural da fruta, sem açúcar, rico em vitamina C",
        price: 7.90,
        category: "bebidas",
        rating: 4.7,
        prepTime: "3-5 min"
    },
    {
        id: 9,
        name: "Água Mineral 500ml",
        description: "Água mineral natural gelada",
        price: 3.50,
        category: "bebidas",
        rating: 4.8,
        prepTime: "Imediato"
    },
    {
        id: 10,
        name: "Milkshake de Chocolate",
        description: "Cremoso milkshake com sorvete de chocolate belga e chantilly",
        price: 12.90,
        category: "bebidas",
        rating: 4.9,
        prepTime: "8-10 min"
    },
    {
        id: 11,
        name: "Suco de Açaí",
        description: "Suco natural de açaí com banana e guaraná",
        price: 9.90,
        category: "bebidas",
        rating: 4.6,
        prepTime: "5-8 min"
    },
    {
        id: 12,
        name: "Brownie com Sorvete",
        description: "Brownie quentinho com sorvete de baunilha e calda de chocolate belga",
        price: 14.90,
        category: "doces",
        rating: 4.8,
        prepTime: "10-12 min"
    },
    {
        id: 13,
        name: "Pudim da Casa",
        description: "Pudim de leite condensado cremoso com calda de caramelo caseira",
        price: 8.90,
        category: "doces",
        rating: 4.7,
        prepTime: "Imediato"
    },
    {
        id: 14,
        name: "Torta de Limão",
        description: "Torta de limão com massa crocante e merengue italiano",
        price: 11.90,
        category: "doces",
        rating: 4.6,
        prepTime: "Imediato"
    },
    {
        id: 15,
        name: "Petit Gateau",
        description: "Bolinho de chocolate com centro cremoso, sorvete de creme e frutas vermelhas",
        price: 16.90,
        category: "doces",
        rating: 4.9,
        prepTime: "15-18 min"
    }
];

// Estado da aplicação
let currentCategory = '';
let searchQuery = '';
let cartItems = [];
let isCartOpen = false;

// Elementos DOM
const searchInput = document.getElementById('searchInput');
const clearSearchBtn = document.getElementById('clearSearch');
const menuContainer = document.getElementById('menuContainer');
const noResults = document.getElementById('noResults');
const filterButtons = document.querySelectorAll('.filter-btn');
const cartToggle = document.getElementById('cartToggle');
const cartPanel = document.getElementById('cartPanel');
const closeCartBtn = document.getElementById('closeCart');
const cartItemsContainer = document.getElementById('cartItems');
const cartCount = document.getElementById('cartCount');
const cartTotalElement = document.getElementById('cartTotal');
const subtotalElement = document.getElementById('subtotal');
const finalTotalElement = document.getElementById('finalTotal');
const checkoutBtn = document.getElementById('checkoutBtn');
const checkoutModal = document.getElementById('checkoutModal');
const closeModalBtn = document.getElementById('closeModal');
const checkoutForm = document.getElementById('checkoutForm');
const orderSummary = document.getElementById('orderSummary');
const orderSubtotal = document.getElementById('orderSubtotal');
const orderTotal = document.getElementById('orderTotal');
const cancelOrderBtn = document.getElementById('cancelOrder');
const loadingOverlay = document.getElementById('loadingOverlay');
const toastContainer = document.getElementById('toastContainer');

// Inicialização
document.addEventListener('DOMContentLoaded', function() {
    renderMenu();
    setupEventListeners();
});

// Event Listeners
function setupEventListeners() {
    // Busca
    searchInput.addEventListener('input', handleSearch);
    clearSearchBtn.addEventListener('click', clearSearch);
    
    // Filtros
    filterButtons.forEach(btn => {
        btn.addEventListener('click', () => handleCategoryFilter(btn.dataset.categoria));
    });
    
    // Carrinho
    cartToggle.addEventListener('click', toggleCart);
    closeCartBtn.addEventListener('click', closeCart);
    checkoutBtn.addEventListener('click', openCheckoutModal);
    
    // Modal
    closeModalBtn.addEventListener('click', closeCheckoutModal);
    cancelOrderBtn.addEventListener('click', closeCheckoutModal);
    checkoutForm.addEventListener('submit', handleOrderSubmit);
    
    // Cliques fora do carrinho e modal
    document.addEventListener('click', handleOutsideClick);
    
    // ESC para fechar modal e carrinho
    document.addEventListener('keydown', handleKeyDown);
}

// Renderização do menu
function renderMenu() {
    const filteredItems = menuData.filter(item => {
        const matchesCategory = currentCategory === '' || item.category === currentCategory;
        const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                             item.description.toLowerCase().includes(searchQuery.toLowerCase());
        return matchesCategory && matchesSearch;
    });
    
    menuContainer.innerHTML = '';
    
    if (filteredItems.length === 0) {
        noResults.classList.remove('hidden');
        return;
    } else {
        noResults.classList.add('hidden');
    }
    
    filteredItems.forEach(item => {
        const menuItemElement = createMenuItemElement(item);
        menuContainer.appendChild(menuItemElement);
    });
}

// Criar elemento do item do menu
function createMenuItemElement(item) {
    const itemElement = document.createElement('div');
    itemElement.className = 'menu-item';
    itemElement.innerHTML = `
        <div class="item-header">
            <div class="item-info">
                <h3 class="item-name">${item.name}</h3>
                <p class="item-description">${item.description}</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="item-footer">
            <span class="item-price">R$ ${item.price.toFixed(2).replace('.', ',')}</span>
            <button class="add-btn" onclick="addToCart(${item.id})">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 5v14m-7-7h14" stroke="currentColor" stroke-width="2"/>
                </svg>
                Adicionar
            </button>
        </div>
    `;
    return itemElement;
}

// Busca
function handleSearch(e) {
    searchQuery = e.target.value.trim();
    
    if (searchQuery) {
        clearSearchBtn.classList.remove('hidden');
    } else {
        clearSearchBtn.classList.add('hidden');
    }
    
    renderMenu();
}

function clearSearch() {
    searchInput.value = '';
    searchQuery = '';
    clearSearchBtn.classList.add('hidden');
    renderMenu();
}

// Filtro de categoria
function handleCategoryFilter(category) {
    currentCategory = category;
    
    // Atualizar botões ativos
    filterButtons.forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    renderMenu();
}

// Carrinho
function addToCart(itemId) {
    const item = menuData.find(i => i.id === itemId);
    if (!item) return;
    
    const existingItem = cartItems.find(i => i.id === itemId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cartItems.push({ ...item, quantity: 1 });
    }
    
    updateCartUI();
    showToast('success', 'Item adicionado', `${item.name} foi adicionado ao carrinho`);
    
    // Animação do botão
    const btn = event.target;
    btn.style.transform = 'scale(0.95)';
    setTimeout(() => {
        btn.style.transform = 'scale(1)';
    }, 150);
}

function removeFromCart(itemId) {
    const itemIndex = cartItems.findIndex(i => i.id === itemId);
    if (itemIndex > -1) {
        const item = cartItems[itemIndex];
        cartItems.splice(itemIndex, 1);
        updateCartUI();
        showToast('success', 'Item removido', `${item.name} foi removido do carrinho`);
    }
}

function updateQuantity(itemId, newQuantity) {
    if (newQuantity <= 0) {
        removeFromCart(itemId);
        return;
    }
    
    const item = cartItems.find(i => i.id === itemId);
    if (item) {
        item.quantity = newQuantity;
        updateCartUI();
    }
}

function updateCartUI() {
    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    // Atualizar contador e total do botão
    cartCount.textContent = totalItems;
    cartTotalElement.textContent = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
    
    // Atualizar totais no painel
    subtotalElement.textContent = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
    finalTotalElement.textContent = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
    
    // Habilitar/desabilitar botão de checkout
    checkoutBtn.disabled = cartItems.length === 0;
    
    // Renderizar itens do carrinho
    renderCartItems();
}

function renderCartItems() {
    if (cartItems.length === 0) {
        cartItemsContainer.innerHTML = `
            <div class="empty-cart">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="8" cy="21" r="1" stroke="currentColor" stroke-width="2"/>
                    <circle cx="19" cy="21" r="1" stroke="currentColor" stroke-width="2"/>
                    <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" stroke="currentColor" stroke-width="2"/>
                </svg>
                <p>Seu carrinho está vazio</p>
                <small>Adicione itens do cardápio para começar</small>
            </div>
        `;
        return;
    }
    
    cartItemsContainer.innerHTML = cartItems.map(item => `
        <div class="cart-item">
            <div class="cart-item-info">
                <div class="cart-item-name">${item.name}</div>
                <div class="cart-item-price">R$ ${item.price.toFixed(2).replace('.', ',')}</div>
            </div>
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
                <span class="quantity">${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
            </div>
            <button class="remove-item" onclick="removeFromCart(${item.id})">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 6h18m-2 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" stroke="currentColor" stroke-width="2"/>
                </svg>
            </button>
        </div>
    `).join('');
}

function toggleCart() {
    if (isCartOpen) {
        closeCart();
    } else {
        openCart();
    }
}

function openCart() {
    isCartOpen = true;
    cartPanel.classList.add('show');
    updateCartUI();
}

function closeCart() {
    isCartOpen = false;
    cartPanel.classList.remove('show');
}

// Modal de checkout
function openCheckoutModal() {
    if (cartItems.length === 0) return;
    
    checkoutModal.classList.add('show');
    document.body.style.overflow = 'hidden';
    renderOrderSummary();
    closeCart();
}

function closeCheckoutModal() {
    checkoutModal.classList.remove('show');
    document.body.style.overflow = 'auto';
    checkoutForm.reset();
}

function renderOrderSummary() {
    const totalPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    orderSummary.innerHTML = cartItems.map(item => `
        <div class="order-item">
            <div class="order-item-info">
                <div class="order-item-name">${item.name}</div>
                <div class="order-item-quantity">${item.quantity}x R$ ${item.price.toFixed(2).replace('.', ',')}</div>
            </div>
            <div class="order-item-price">R$ ${(item.price * item.quantity).toFixed(2).replace('.', ',')}</div>
        </div>
    `).join('');
    
    orderSubtotal.textContent = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
    orderTotal.textContent = `R$ ${totalPrice.toFixed(2).replace('.', ',')}`;
}

// Submissão do pedido
function handleOrderSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(checkoutForm);
    const orderData = {
        customerName: formData.get('customerName'),
        phone: formData.get('phone'),
        address: formData.get('address'),
        observations: formData.get('observations'),
        items: cartItems,
        total: cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    };
    
    // Validação básica
    if (!orderData.customerName || !orderData.phone || !orderData.address) {
        showToast('error', 'Campos obrigatórios', 'Por favor, preencha todos os campos obrigatórios');
        return;
    }
    
    processOrder(orderData);
}

async function processOrder(orderData) {
    loadingOverlay.classList.remove('hidden');
    closeCheckoutModal();
    
    try {
        // Simular processamento
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Gerar mensagem do WhatsApp
        const whatsappMessage = generateWhatsAppMessage(orderData);
        
        // Limpar carrinho
        cartItems = [];
        updateCartUI();
        
        loadingOverlay.classList.add('hidden');
        
        showToast('success', 'Pedido enviado!', 'Redirecionando para o WhatsApp...');
        
        // Redirecionar para WhatsApp
        setTimeout(() => {
            const whatsappUrl = `https://wa.me/5511999999999?text=${encodeURIComponent(whatsappMessage)}`;
            window.open(whatsappUrl, '_blank');
        }, 1500);
        
    } catch (error) {
        loadingOverlay.classList.add('hidden');
        showToast('error', 'Erro no pedido', 'Ocorreu um erro ao processar seu pedido. Tente novamente.');
    }
}

function generateWhatsAppMessage(orderData) {
    let message = `🍔 *NOVO PEDIDO - Lanchonete do Bairro*\n\n`;
    message += `👤 *Cliente:* ${orderData.customerName}\n`;
    message += `📱 *Telefone:* ${orderData.phone}\n`;
    message += `📍 *Endereço:* ${orderData.address}\n\n`;
    
    message += `📋 *Itens do Pedido:*\n`;
    orderData.items.forEach(item => {
        message += `• ${item.quantity}x ${item.name} - R$ ${(item.price * item.quantity).toFixed(2).replace('.', ',')}\n`;
    });
    
    message += `\n💰 *Total:* R$ ${orderData.total.toFixed(2).replace('.', ',')}\n`;
    
    if (orderData.observations) {
        message += `\n📝 *Observações:* ${orderData.observations}\n`;
    }
    
    message += `\n⏰ *Pedido feito em:* ${new Date().toLocaleString('pt-BR')}`;
    
    return message;
}

// Cliques fora dos elementos
function handleOutsideClick(e) {
    // Fechar carrinho se clicar fora
    if (isCartOpen && !cartPanel.contains(e.target) && !cartToggle.contains(e.target)) {
        closeCart();
    }
    
    // Fechar modal se clicar no overlay
    if (e.target.classList.contains('modal-overlay')) {
        closeCheckoutModal();
    }
}

// Teclas de atalho
function handleKeyDown(e) {
    if (e.key === 'Escape') {
        if (checkoutModal.classList.contains('show')) {
            closeCheckoutModal();
        } else if (isCartOpen) {
            closeCart();
        }
    }
}

// Notificações Toast
function showToast(type, title, message) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <div class="toast-content">
            <div class="toast-title">${title}</div>
            <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="m18 6-12 12" stroke="currentColor" stroke-width="2"/>
                <path d="m6 6 12 12" stroke="currentColor" stroke-width="2"/>
            </svg>
        </button>
    `;
    
    toastContainer.appendChild(toast);
    
    // Auto remover após 5 segundos
    setTimeout(() => {
        if (toast.parentElement) {
            toast.remove();
        }
    }, 5000);
}

// Formatação de telefone
document.getElementById('phone').addEventListener('input', function(e) {
    let value = e.target.value.replace(/\D/g, '');
    if (value.length >= 11) {
        value = value.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
    } else if (value.length >= 7) {
        value = value.replace(/(\d{2})(\d{4})(\d+)/, '($1) $2-$3');
    } else if (value.length >= 3) {
        value = value.replace(/(\d{2})(\d+)/, '($1) $2');
    }
    e.target.value = value;
});

// Lazy loading para performance
function lazyLoadImages() {
    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
            }
        });
    });
    
    images.forEach(img => imageObserver.observe(img));
}

// Inicializar lazy loading se suportado
if ('IntersectionObserver' in window) {
    lazyLoadImages();
}